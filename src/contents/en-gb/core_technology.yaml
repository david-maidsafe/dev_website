pageIntro:
  title: Core Technology
  para1:
    chunk1: The SAFE Network core libraries are written exclusively in Rust and the content below provides a brief explanation of their hierarchy. The code is all open source and for more information please refer to our
    link:
      name: licensing
      href: /licensing
    chunk2: page.
components:
  title: Project Hierarchy
  comp1:
    name: Crust
    para1:
      chunk1: "Crust is a low level networking library that is optimised for peer-to-peer connections and data transportation.  Crust implements primitives to connect two peers together and start exchanging messages in a secure, reliable way. It supports multiple protocols ("
      link1:
        name: "UDP"
        href: 'https://en.wikipedia.org/wiki/User_Datagram_Protocol'
      chunk2: " and "
      link2:
        name: "TCP"
        href: 'https://en.wikipedia.org/wiki/Transmission_Control_Protocol'
      chunk3: ") and it is crypto secure - all communications, starting with handshake messages, are encrypted. It also provides other security features like randomised ports that are used to prevent targeting a particular known port to conduct DoS attacks. Crust implements several "
      link3:
        name: "NAT traversal"
        href: 'https://en.wikipedia.org/wiki/NAT_traversal'
      chunk4: " techniques such as hole punching and use of "
      link4:
        name: "IGD"
        href: 'https://en.wikipedia.org/wiki/Internet_Gateway_Device_Protocol'
      chunk5: "."
  comp2:
    name: Routing
    para1: Routing sits on top of Crust. It is our overlay networking and routing layer and forms the brain of the SAFE Network. Its purpose is forming a decentralised Internet and routing information within it.
    para2:
      chunk1: Routing is based on an algorithm that extends the
      link1:
        name: Kademlia
        href: https://en.wikipedia.org/wiki/Kademlia
      chunk2: DHT routing. It uses 32-byte XOR addresses to locate data on the network. It is guaranteed that messages can be routed from any part of the network to any other end - as is proven by the Kademlia paper. Routing works purely on the terms of group consensus. We don’t trust a single entity, only a group decision with
      link2:
        name: eventual consistency
        href: https://en.wikipedia.org/wiki/Eventual_consistency
      chunk3: "."
    para3:
      chunk1: In order to come to this eventual consistency the routing layer uses the consensus mechanism
      link1:
        name: PARSEC
        href: '/parsec'
      chunk2: "."
  comp3:
    name: Vault
    para1: This is one of the executable consumers of Routing and will primarily hold SAFE Network Data.
    para2: "Vaults support multiple data types, the ones that are currently available to developers are Mutable Data and Immutable Data. The major difference between these two types is the ability to change the data. Both have their own set of properties."
    para5: "Personas in Vaults handle the different aspects of the network. Data Managers store the data, Client Managers store the users accounts balance, which is currently measured in allowed mutations, and eventually will be changed to Safecoin. Client Managers also store lists of users’ apps and implement the access control rules. There is no requirement to have a registered account to retrieve data and users are always free to send direct read requests to Data Managers."
  comp4:
    name: SAFE Client Libs
    para1: This is the other consumer of Routing. It is a library that provides high-level interface to access the SAFE Network for front-end apps written in different programming languages that we support. SAFE Client Libs consist of a group of crates that have their own specific respective roles.
    para2: The Authenticator is the component that provides Self Authenticated login and account creation and handles the register of all users' apps. It is integrated with the SAFE Browser and apps can request the access to the network through it. If users don't want to use a certain app anymore, they can revoke the access.
    para3:
      chunk1: SAFE App is the component that provides access to SAFE Network for front-end Apps in a user friendly way via
      link1:
        name: FFI
        href: https://en.wikipedia.org/wiki/Foreign_function_interface
      chunk2: '.'
    para4: SAFE Core is the foundation that provides various helpful abstractions like NFS on top of the basic network building blocks. It is also the common backend for the Authenticator and SAFE App, forming the client engine.
utilities:
  title: Utilities and Helper Libraries
  comp1:
    name: Self-Encryption
    para1: MaidSAFE patented scheme for generating entropy to obfuscate and encrypt data from the data itself.
    para2:
      chunk1: Self-Encryption is based on the
      link1:
        name: convergent encryption
        href: https://en.wikipedia.org/wiki/Convergent_encryption
      chunk2: "algorithm. It produces the same encrypted output for the same plaintext input. This property allows us to deduplicate files at the network level. Files are split up into multiple chunks, stored on the network at the same predictable location, based on the encrypted chunks’ hashes. The result of the encryption process is a data map that holds keys to the encrypted data chunks and is stored securely on the network. This crate is usable even outside of the SAFE Network context as the I/O implementation is abstract."
  comp2:
    name: System-URI
    para1: Generic crate that registers executables for the specified scheme with the OS so the executable can become the handler for that scheme.
  comp3:
    name: Rust-Sodium
    para1: Libsodium bindings, forked from the sodiumoxide project, provides extra features and improves the security.

rfcs:
  title: "RFCs - Request For Comments"
  summary: "The RFC (Request For Comments) process is intended to provide a consistent and controlled path for new features to enter the network and core libraries, so that all stakeholders can be confident about the direction in which the network is evolving."
  learn:
    name: "Learn More"
    href: 'https://github.com/maidsafe/rfcs/blob/master/README.md'
  active:
    name: "RFC Status Page"
    href: 'https://github.com/maidsafe/rfcs/blob/master/RFCs-by-status.md#active-rfcs'
patents:
  title: Relevant Patents
  patent1:
    name: Method for storing data on a peer-to-peer network
    href: '/patent1'
  patent2:
    name: Method for storing data on a peer-to-peer network
    href: '/patent2'
  patent3:
    name: Method for storing data on a peer-to-peer network
    href: '/patent3'
